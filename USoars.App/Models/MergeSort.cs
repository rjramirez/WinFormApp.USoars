// <auto-generated>
// This file contains the MergeSort class of SortingApp.
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </auto-generated>

namespace SortingApp.Models
{
    /// <summary>
    /// Represents the MergeSort algorithm.
    /// </summary>
    public class MergeSort : ISortStrategy
    {
        /// <inheritdoc/>
        public string Sort(string input)
        {
            char[] array = input.ToCharArray();
            MergeSortRecursive(array, 0, array.Length - 1);
            return new string(array);
        }

        private void MergeSortRecursive(char[] array, int left, int right)
        {
            if (left < right)
            {
                int middle = (left + right) / 2;
                MergeSortRecursive(array, left, middle);
                MergeSortRecursive(array, middle + 1, right);
                Merge(array, left, middle, right);
            }
        }

        private void Merge(char[] array, int left, int middle, int right)
        {
            int n1 = middle - left + 1;
            int n2 = right - middle;

            char[] leftArray = new char[n1];
            char[] rightArray = new char[n2];

            Array.Copy(array, left, leftArray, 0, n1);
            Array.Copy(array, middle + 1, rightArray, 0, n2);

            int i = 0, j = 0, k = left;

            while (i < n1 && j < n2)
            {
                if (leftArray[i] <= rightArray[j])
                {
                    array[k++] = leftArray[i++];
                }
                else
                {
                    array[k++] = rightArray[j++];
                }
            }

            while (i < n1)
            {
                array[k++] = leftArray[i++];
            }

            while (j < n2)
            {
                array[k++] = rightArray[j++];
            }
        }
    }
}
